trigger:
  branches:
    include:
      - infra/dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: dockerhub-credentials
  - name: environment
    value: dev
  - name: tf_version
    value: '1.5.5'
  - name: ansible_path
    value: '/home/azureuser/microservice-app-example/ansible'
  - name: inventory_path
    value: '$(Build.SourcesDirectory)/ansible/inventory/hosts.ini'

steps:
  - task: TerraformInstaller@0
    inputs:
      terraformVersion: '$(tf_version)'
    displayName: 'Instalar Terraform'

  - script: terraform --version
    displayName: 'Verificar versión de Terraform'

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'Kevin'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        cd infra

        RESOURCE_GROUP="rg-dev-microservices"
        SUBSCRIPTION_ID="9c34612c-d9bc-4f45-932e-44a22a08a99b"
        NSG_NAME="nsg-dev"
        VNET_NAME="vnet-dev"
        SUBNET_NAME="subnet-dev"
        NIC_NAME="nic-dev"
        VM_NAME="dev-vm"
        PUBLIC_IP_NAME="public-ip-dev"

        terraform init -reconfigure \
          -backend-config="resource_group_name=rg-terraform-state" \
          -backend-config="storage_account_name=terraformstate2644016" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=dev.terraform.tfstate"

        # Función para importar recursos si existen
        import_if_exists () {
          RESOURCE_TYPE=$1
          BLOCK_NAME=$2
          RESOURCE_ID=$3
          CHECK_COMMAND=$4

          echo "Verificando $RESOURCE_TYPE..."
          if eval "$CHECK_COMMAND" >/dev/null 2>&1; then
            echo "$RESOURCE_TYPE existe. Importando..."
            terraform import -var-file="terraform.tfvars" "$BLOCK_NAME" "$RESOURCE_ID"
          else
            echo "$RESOURCE_TYPE no existe. Saltando importación."
          fi
        }

        # Importar si existen
        import_if_exists "Resource Group" \
          "azurerm_resource_group.rg" \
          "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP" \
          "az group show --name $RESOURCE_GROUP --subscription $SUBSCRIPTION_ID"

        import_if_exists "NSG" \
          "azurerm_network_security_group.nsg" \
          "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/networkSecurityGroups/$NSG_NAME" \
          "az group show --name $RESOURCE_GROUP --subscription $SUBSCRIPTION_ID"

        import_if_exists "Virtual Network" \
          "azurerm_virtual_network.vnet" \
          "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/virtualNetworks/$VNET_NAME" \
          "az network vnet show --resource-group $RESOURCE_GROUP --name $VNET_NAME --subscription $SUBSCRIPTION_ID"

        import_if_exists "Subnet" \
          "azurerm_subnet.subnet" \
          "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/virtualNetworks/$VNET_NAME/subnets/$SUBNET_NAME" \
          "az network vnet subnet show --resource-group $RESOURCE_GROUP --vnet-name $VNET_NAME --name $SUBNET_NAME --subscription $SUBSCRIPTION_ID"

        import_if_exists "NIC" \
          "azurerm_network_interface.nic" \
          "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/networkInterfaces/$NIC_NAME" \
          "az network nic show --resource-group $RESOURCE_GROUP --name $NIC_NAME --subscription $SUBSCRIPTION_ID"

        import_if_exists "NIC-NSG Association" \
          "azurerm_network_interface_security_group_association.nsg_assoc" \
          "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/networkInterfaces/$NIC_NAME|/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/networkSecurityGroups/$NSG_NAME" \
          "az network nic show --resource-group $RESOURCE_GROUP --name $NIC_NAME --subscription $SUBSCRIPTION_ID"

        import_if_exists "VM" \
          "azurerm_linux_virtual_machine.vm" \
          "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Compute/virtualMachines/$VM_NAME" \
          "az vm show --resource-group $RESOURCE_GROUP --name $VM_NAME --subscription $SUBSCRIPTION_ID"

        import_if_exists "Public IP" \
          "azurerm_public_ip.public_ip" \
          "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/publicIPAddresses/$PUBLIC_IP_NAME" \
          "az network public-ip show --resource-group $RESOURCE_GROUP --name $PUBLIC_IP_NAME --subscription $SUBSCRIPTION_ID"

        terraform plan -var-file="terraform.tfvars" -out=tfplan
        terraform apply -auto-approve tfplan
    displayName: 'Importar si existen y desplegar infraestructura DEV con Terraform'

  - task: AzureCLI@2
    name: GetVmIpAndPassword
    inputs:
      azureSubscription: 'Kevin'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        cd infra
        PUBLIC_IP=$(terraform output -raw vm_public_ip)
        PASSWORD=$(terraform output -raw admin_password)
        echo "##vso[task.setvariable variable=vmIp]$PUBLIC_IP"
        echo "##vso[task.setvariable variable=vmPassword]$PASSWORD"
    displayName: 'Obtener IP pública y contraseña de la VM'

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'Kevin'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        sudo apt-get update && sudo apt-get install -y sshpass
        echo "Clonando en VM con IP $(vmIp)"
        sshpass -p "$(vmPassword)" ssh -T -o StrictHostKeyChecking=no azureuser@$(vmIp) 'rm -rf /home/azureuser/microservice-app-example && git clone --branch infra/dev https://github.com/SanjoDB/microservice-app-example /home/azureuser/microservice-app-example'
    displayName: 'Clonar repositorio rama infra/dev'


  - task: AzureCLI@2
    inputs:
      azureSubscription: 'Kevin'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        sudo apt-get update && sudo apt-get install -y sshpass gnome-keyring
        echo "Ejecutando Ansible dentro de la VM en IP $(vmIp)"
        sshpass -p "$(vmPassword)" ssh -T -o StrictHostKeyChecking=no azureuser@$(vmIp) '
          sudo apt-get update &&
          sudo apt-get install -y ansible &&
          cd /home/azureuser/microservice-app-example/ansible &&
          export DOCKERHUB_USERNAME=$(DOCKERHUB_USERNAME) &&
          export DOCKERHUB_PASSWORD=$(DOCKERHUB_PASSWORD) &&
          export ANSIBLE_ROLES_PATH=./roles &&
          export ANSIBLE_HOST_KEY_CHECKING=False &&
          ansible-playbook -i inventory/hosts.ini playbooks/playbook.yml
        '
    displayName: 'Instalar Ansible y ejecutar playbook dentro de la VM'
